/*
 *  File: 	VanguardPreparedStatements.txt	
 *
 *  Purpose: 	Documents the prepared commands for creating 
 * 		and updating records within the  
 *		2023 Scouting app Databse 
 *  
 *  Author: 	Cordelia Notbohm
 *  Version: 	1.1.0
 *  Date:    	3/3/23
 *
 */


-------------------------------------------------------------
--   Statements for inserting records from blue alliance   --
-------------------------------------------------------------

/*
 * 	The following prepare statements are the statements 
 * 	That are expected to be needed in order to pull 
 * 	and enter team, competition, and match data from 
 * 	blue alliance prior to a competition
 */


/*
 *	Inserting a new robot record for a given FRC team 
 */ 
PREPARE insertARobot (varchar(10), varchar(6), varchar(60)) AS 
	INSERT INTO Robot (TBAKey, number, name)
	VALUES ($1, $2, $3);

-- example execute:
-- EXECUTE insertARobot ('frc2930', '2930', 'Sonic Squirrels');




/*
 *	Inserting a new competition record for a given competition
 */ 
PREPARE insertACompetition (varchar(12), varchar(120), date) AS 
	INSERT INTO Competition (TBAKey, name, startDate)
	VALUES ($1, $2, $3);

-- example execute:
-- EXECUTE insertACompetition ('2023WASNO', 'Glacier Peak', '2023-3-4');




/*
 *	Inserting a new match record for a given match 
 */ 
PREPARE insertAMatch (varchar(20), varchar(12), varchar(2), varchar(3)) AS 
	INSERT INTO Match (TBAKey, competitionTBAKey, matchTypeID, number)
	VALUES ($1, $2, $3, $4);

-- example execute:
-- EXECUTE insertAMatch('2023WASNO_qm1', '2023WASNO', 'Q', '1');




/*
 *	Inserting a new RobotInMatch record to record a robot 
 * 	Being scheduled for a particular match  
 */ 
PREPARE insertARobotInMatch (varchar(20), varchar(10), char(2)) AS 
	INSERT INTO RobotInMatch (matchTBAKey, robotTBAKey, allianceStationID)
	VALUES ($1, $2, $3);

-- example execute:
-- EXECUTE insertARobotInMatch('2023WASNO_qm1', 'frc2930', 'R1');




-----------------------------------------------------------------
--   Statements for inserting records while scouting a match   --
-----------------------------------------------------------------

/*
 *	Query for getting all the competitions that have been 
 * 	loaded to the DB to display the events that can be scoutied
 * 	-- use this if we want to show all comps regardless of if 
 * 	there is loaded matches or not 
 */ 
PREPARE getCompetitions AS
	SELECT * 
	FROM Competition
	ORDER BY Competition.startdate;

-- example execute:
-- EXECUTE getCompetitions;




/*
 *	Query for getting all the competitions that have been 
 * 	loaded to the DB and have at least one robot in match entered
 *  	to display the events that can be scoutied
 * 	-- use this if we only want to show comps that 
 * 	have loaded matches  
 */ 
PREPARE getCompetitionWithMatchSchedules AS
	SELECT Competition.TBAKey, Competition.name, Competition.startdate
	FROM Competition
		JOIN Match ON (Competition.TBAKey = Match.competitionTBAKey)
		JOIN RobotInMatch ON (Match.TBAKey = RobotInMatch.MatchTBAKey)
	ORDER BY Competition.startdate DESC;

-- example execute:
-- EXECUTE getCompetitionWithMatchSchedules;




/*
 *	Query for getting all robot in matches for a particular 
 * 	competition and alliance station to display the matches that
 * 	can be scouted and the robots to be scouted for that match 
 * 	-- needs the compKey and the alliance station ID
 */ 
PREPARE getRobotInMatchesForAllianceStation (varchar(12), char(2)) AS
	SELECT 	RobotInMatch.ID AS "RobotInMatchID",
		MatchType.name || ' ' || Match.number AS "Match Number",
		Robot.number AS "Team Number"
	FROM RobotInMatch
		JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
		JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
		JOIN Robot ON (RobotInMatch.RobotTBAKey = Robot.TBAKey)
	WHERE Match.competitionTBAKey = $1 AND
		RobotInMatch.allianceStationID = $2
	ORDER BY Match.matchTypeID DESC, Match.number::integer ASC;

-- example execute:
-- EXECUTE getRobotInMatchesForAllianceStation('2023WASNO', 'R1');




/*
 *	inserting a new scout record for a selected robot in match
 * 	to use to gather all the data about the robot that this particular
 * 	scout collects 
 * 	- needs the ID of the robotInMatch 
 */ 
PREPARE insertAScout (integer) AS
	INSERT INTO Scout (robotInMatchID)
	VALUES ($1)
	RETURNING ID;

-- example execute:
-- EXECUTE insertAScout(1);


/*
 *	updating the preloaded piece attribute for a scout record 
 * 	to collect the type of piece that was preloaded in a given 
 * 	robot in match 
 * 	-- needs a scoutID and a gamePieceID
 */ 
PREPARE updatePreloadedPiece (integer, varchar(2)) AS
	UPDATE Scout
	SET preloadedPieceId = $2	
	WHERE Scout.ID = $1;

-- example execute:
-- EXECUTE updatePreloadedPiece(1, 'CN');



/*
 *	insert a new start event record for the current scout record
 * 	to signify that the scout has started scouting the match 
 * 	-- needs a scoutID
 */
PREPARE insertStartEvent (integer) AS	
	INSERT INTO StartFinishEvent (scoutID, startFinishTypeID, timeOccurred)
	VALUES ($1, 'S', CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertStartEvent(1);



/*
 *	insert a new pickUpGamePieceEvent record for the current scout record
 * 	to signify that the robot the scout is watching has picked
 *	up a game piece 
 * 	-- needs a scout ID, a match period, a game peice, and a pickup location 
 */
PREPARE insertPickUpGamePieceEvent (integer, varchar(2), varchar(2), varchar(2)) AS	
	INSERT INTO PickUpGamePieceEvent (scoutID, matchPeriodID, gamePieceID, 
		pickupLocationID, timeOccurred)
	VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertPickUpGamePieceEvent(1, 'T', 'CN', 'DS');




/*
 *	insert a new scoreGamePieceEvent record for the current scout record
 * 	to signify that the robot the scout is watching has scored
 *  	a game piece 
 * 	-- needs a scout ID, a match period, a game peice, and a scoring location
 */
PREPARE insertScoreGamePieceEvent (integer, varchar(2), varchar(2), varchar(2)) AS	
	INSERT INTO ScoreGamePieceEvent (scoutID, matchPeriodID, gamePieceID, 
		scoringLocationID, timeOccurred)
	VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertScoreGamePieceEvent(1, 'A', 'CN', 'H7');




/*
 *	insert a new scoreWithoutGamePieceEvent record for the current scout 
 *	record to signify that the robot the scout is watching has scored
 *  	points without using a game peice 
 * 	-- needs a scout ID, a match period, and a scoring type
 */
PREPARE insertScoreWithoutGamePieceEvent (integer, varchar(2), varchar(2)) AS	
	INSERT INTO ScoreWithoutGamePieceEvent (scoutID, matchPeriodID,
		nonGamePieceScoringTypeID, timeOccurred)
	VALUES ($1, $2, $3, CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertScoreWithoutGamePieceEvent(1, 'A', 'EG');



/*
 *	insert a new FaultEvent record for the current scout 
 *	record to signify that the robot the scout is watching has 
 *  	made some sort of mistake or undesireable action  
 * 	-- needs a scoutID, a match period, and a fault Type
 */

PREPARE insertFaultEvent (integer, varchar(2), varchar(2)) AS	
	INSERT INTO faultEvent (scoutID, matchPeriodID,
		faultTypeID, timeOccurred)
	VALUES ($1, $2, $3, CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertFaultEvent(1, 'A', 'DC');




/*
 *	insert a new finish event record for the current scout record
 * 	to signify that the scout has finished scouting the match 
 * 	-- needs a scoutID
 */
PREPARE insertFinishEvent (integer) AS	
	INSERT INTO StartFinishEvent (scoutID, startFinishTypeID, timeOccurred)
	VALUES ($1, 'F', CURRENT_TIMESTAMP);

-- example execute:
-- EXECUTE insertFinishEvent(1);




/*
 *	updating the notes attribute for a scout record 
 * 	to collect any notes that a scout have about a 
 * 	robot in match 
 * 	-- need a scout ID and the note
 */ 

PREPARE updateNotes (integer, text) AS
	UPDATE Scout
	SET notes = $2	
	WHERE Scout.ID = $1;

-- example execute:
-- EXECUTE updateNotes(1, 'They were getting heavily defended');



-----------------------------------------------------------------
--   Statements for getting information from collected data    --
-----------------------------------------------------------------


/*
 *	Query for getting all the competitions that have been 
 * 	loaded to the DB to display the events that can be queried 
 * 	for data 
 * 	-- use this if we want to show all comps regardless of if 
 * 	there is data or not 
 *	-- same as query in above section about getting competitions
 */ 
PREPARE getCompetitions AS
	SELECT * 
	FROM Competition;





/*
 *	Query for getting all the competitions that have been 
 * 	loaded to the DB and have at least one scout entity entered
 *  	to display the events that can be scoutied queried for data
 * 	-- use this if we only want to show comps that 
 * 	have some data 
 */ 
PREPARE getCompetitionWithMatchData AS
	SELECT Competition.TBAKey, Competition.name, Competition.startdate
	FROM Competition
		JOIN Match ON (Competition.TBAKey = Match.competitionTBAKey)
		JOIN RobotInMatch ON (Match.TBAKey = RobotInMatch.MatchTBAKey)
		JOIN Scout ON (RobotInMatch.ID = Scout.RobotInMatchID);

-- example execute:
-- EXECUTE getCompetitionWithMatchData;





/*
 *	Query for calculating the average points scored 
 * 	by each of the robots at a competition 
 */ 
PREPARE getAllAveragePointsAtComp (varchar(12))  AS
-- averages the points for all of their matches 
-- to get the average points scored in a competition 
SELECT Robot.number AS "Team Number", Robot.name AS "Team Name",
	ROUND(AVG(PointsPerMatch.points), 2) AS "Average Points"
FROM Robot
    JOIN (
    -- averages the points between the different scouts, to 
    -- get the points a robot scored in each of their matches
    SELECT RobotInMatch.id, RobotInMatch.robotTBAKey, 
			AVG(PointsPerScout.points) AS points
    FROM RobotInMatch
	JOIN (
	-- totals all of the points a scout collected for a robot in match 	
	SELECT PointsPerEvent.scout, PointsPerEvent.robotInMatchID,
	 	SUM(PointsPerEvent.points) AS points
	FROM (
		-- creates a list of events, and the points for each event
		-- for each of the events that scouts added 
		SELECT  Scout.ID AS scout, RobotInMatch.ID AS robotInMatchID, 
			'Grid' AS "Type", ScoreGamePieceEvent.MatchPeriodID AS "Period",
			CASE WHEN ScoringLocation.level = 'Low' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'A' THEN 3
	     		WHEN ScoringLocation.level = 'Middle' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'A' THEN 4
	     		WHEN ScoringLocation.level = 'High' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'A' THEN 6
			WHEN ScoringLocation.level = 'Low' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'T' THEN 2
	     		WHEN ScoringLocation.level = 'Middle' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'T' THEN 3
	     		WHEN ScoringLocation.level = 'High' 
				AND ScoreGamePieceEvent.MatchPeriodID = 'T' THEN 5
			END AS Points
		FROM Scout
			JOIN RobotInMatch ON (Scout.robotInMatchID = RobotInMatch.ID)
			JOIN Match ON (RobotInMatch.MatchTBAKey = Match.TBAKey)
			JOIN ScoreGamePieceEvent ON (Scout.ID = ScoreGamePieceEvent.ScoutID)
			JOIN ScoringLocation ON 
				(ScoreGamePieceEvent.ScoringLocationID = ScoringLocation.ID)
		WHERE Match.competitionTBAKey = $1

		UNION ALL

		SELECT Scout.ID AS scout, RobotInMatch.ID AS robotInMatchID, 
			'Charge' AS "Type", ScoreWithoutGamePieceEvent.MatchPeriodID AS "Period",
			CASE WHEN NonGamePieceScoringType.ID = 'MB' 
				AND ScoreWithoutGamePieceEvent.MatchPeriodID = 'A' THEN 3
			WHEN NonGamePieceScoringType.ID = 'PK' 
				AND ScoreWithoutGamePieceEvent.MatchPeriodID = 'T' THEN 2
			WHEN NonGamePieceScoringType.ID = 'DK'  
				AND ScoreWithoutGamePieceEvent.MatchPeriodID = 'A' THEN 8 
			WHEN NonGamePieceScoringType.ID = 'DK'  
				AND ScoreWithoutGamePieceEvent.MatchPeriodID = 'T' THEN 6 
			WHEN NonGamePieceScoringType.ID = 'EG' THEN '4'
			END AS Points
		FROM Scout
			JOIN RobotInMatch ON (Scout.robotInMatchID = RobotInMatch.ID)
			JOIN Match ON (RobotInMatch.MatchTBAKey = Match.TBAKey)
			JOIN ScoreWithoutGamePieceEvent 
				ON (Scout.ID = ScoreWithoutGamePieceEvent.ScoutID)
			JOIN NonGamePieceScoringType 
				ON (ScoreWithoutGamePieceEvent.NonGamePieceScoringTypeID = NonGamePieceScoringType.ID)
		WHERE Match.competitionTBAKey = $1
     	      ) AS PointsPerEvent
	GROUP BY PointsPerEvent.scout, PointsPerEvent.robotInMatchID
	       ) AS PointsPerScout ON (RobotInMatch.ID = PointsPerScout.robotInMatchID)
    GROUP BY RobotInMatch.ID
    	) AS PointsPerMatch ON (Robot.TBAKey = PointsPerMatch.robotTBAKey)
GROUP BY Robot.TBAKey
ORDER BY "Average Points" DESC;

-- example execute:
-- EXECUTE getAllAveragePointsAtComp('2023WATEST');




/*
 * 	for a single robot 
 * 	for each of there matches, how did they contribute to the total score 
 */


/*	
 * 	how a robot scores improved 
 */


/*
 * 	Query for ranking robots according to 
 * 	a specified game peice and level
 */ 


/*
 * 	Query for ranking robots according to 
 * 	a specified non-game piece scoring type
 */ 


/*
 *	Query for categorizing robots
 */ 


/*
 *	Query for getting data to suggest who to team up with
 */ 


/*
 * 	Query for all of a team's auto's sumarized 
 */ 







/*
 * Query for average cones scored per match for each robot 
 */ 

SELECT Robot.number AS "Team Number", 
		ROUND(AVG(conesInAMatch), 2) AS "Average Cones Scored"
FROM Robot
	LEFT JOIN (
	-- averages the total score cone events for all the 
	-- scouts that scouted the same robotInMatch 
	SELECT RobotInMatch.id, RobotInMatch.robotTBAKey, 
			COALESCE(AVG(totalCones),0) AS conesInAMatch
	FROM RobotInMatch 
		LEFT JOIN (
 		-- totals all of the score cone events that a single scout
 		-- added for a match 
 		SELECT Scout.id, Scout.robotInMatchID, 
			COALESCE(COUNT(ScoreGamePieceEvent.ID), 0) AS totalCones
		FROM Scout
			LEFT JOIN ScoreGamePieceEvent ON (Scout.id = ScoreGamePieceEvent.scoutid)
		WHERE ScoreGamePieceEvent.gamePieceID = 'CN'
		GROUP BY Scout.id
	      	     ) AS ConesPerScout ON (RobotInMatch.ID = ConesPerScout.robotInMatchID)
	GROUP BY RobotInMatch.id
	      ) AS ConesPerMatch ON (Robot.TBAKey = ConesPerMatch.robotTBAKey)
GROUP BY Robot.number
ORDER BY "Average Cones Scored" DESC;








/*
 * Query for average cubes scored per match for each robot 
 */ 

SELECT Robot.number AS "Team Number",
		ROUND(AVG(cubesInAMatch), 2) AS "Average Cubes Scored"
FROM Robot
	LEFT JOIN (
	-- averages the total score cone events for all the 
	-- scouts that scouted the same robotInMatch 
	SELECT RobotInMatch.id, RobotInMatch.robotTBAKey, 
			COALESCE(AVG(totalCubes),0) AS cubesInAMatch
	FROM RobotInMatch 
		LEFT JOIN (
 		-- totals all of the score cone events that a single scout
 		-- added for a match 
 		SELECT Scout.id, Scout.robotInMatchID, 
			COALESCE(COUNT(ScoreGamePieceEvent.ID), 0) AS totalCubes
		FROM Scout
			LEFT JOIN ScoreGamePieceEvent ON (Scout.id = ScoreGamePieceEvent.scoutid)
		WHERE ScoreGamePieceEvent.gamePieceID = 'CB'
		GROUP BY Scout.id
	      	     ) AS CubesPerScout ON (RobotInMatch.ID = CubesPerScout.robotInMatchID)
	GROUP BY RobotInMatch.id
	      ) AS CubesPerMatch ON (Robot.TBAKey = CubesPerMatch.robotTBAKey)
GROUP BY Robot.number
ORDER BY "Average Cubes Scored" DESC;








/*
 * Query for average cones, and cubes scored per match for each robot 
 */ 

SELECT Robot.number AS "Team Number", 
		 ROUND(AVG(conesInAMatch), 2) AS "Average Cones Scored",
		 ROUND(AVG(cubesInAMatch), 2) AS "Average Cubes Scored"
FROM Robot
	LEFT JOIN (

	-- averages the total score cone events 
     	-- and score cubes events for all the 
	-- scouts that scouted the same robotInMatch 
	SELECT RobotInMatch.id, RobotInMatch.robotTBAKey, 
		COALESCE(AVG(totalCones),0) AS conesInAMatch,
		COALESCE(AVG(totalCubes),0) AS cubesInAMatch
	FROM RobotInMatch 
		LEFT JOIN (

 		-- totals all of the score cone events 
		-- and score cubes events that a single scout
 		-- added for a match 
 		SELECT Scout.id, Scout.robotInMatchID, 
			COALESCE(COUNT(ScoreGamePieceEvent.gamePieceID = 'CN' OR NULL), 0) 
			AS totalCones,
			COALESCE(COUNT(ScoreGamePieceEvent.gamePieceID = 'CB' OR NULL), 0) 
			AS totalCubes
		FROM Scout
			LEFT JOIN ScoreGamePieceEvent ON 
				(Scout.id = ScoreGamePieceEvent.scoutid)
		GROUP BY Scout.id
	      	     ) AS PiecesPerScout ON 
				(RobotInMatch.ID = PiecesPerScout.robotInMatchID)

	GROUP BY RobotInMatch.id
	      ) AS PiecesPerMatch ON (Robot.TBAKey = PiecesPerMatch.robotTBAKey)

GROUP BY Robot.number
ORDER BY Robot.number::integer ASC;







/*
 * 	Query for avg cubes, avg cones, avg high, avg medium, avg low 
 */ 

SELECT Robot.number AS "Team Number", 
		ROUND(AVG(conesInAMatch), 2) AS "AVG Cones",
		ROUND(AVG(cubesInAMatch), 2) AS "AVG Cubes",
		ROUND(AVG(highInAMatch), 2) AS "AVG High",
		ROUND(AVG(middleInAMatch), 2) AS "AVG Middle",
		ROUND(AVG(lowInAMatch), 2) AS "AVG Low"
FROM Robot
	LEFT JOIN (

	-- averages the total score events for all the 
	-- scouts that scouted the same robotInMatch 
	SELECT RobotInMatch.id, RobotInMatch.robotTBAKey, 
		COALESCE(AVG(totalCones),0) AS conesInAMatch,
		COALESCE(AVG(totalCubes),0) AS cubesInAMatch,
		COALESCE(AVG(totalHigh),0) AS highInAMatch,
		COALESCE(AVG(totalMiddle),0) AS middleInAMatch,
		COALESCE(AVG(totalLow),0) AS lowInAMatch
	FROM RobotInMatch 
		LEFT JOIN (

 		-- totals all of the score events that a single scout
 		-- added for a match 
 		SELECT Scout.id, Scout.robotInMatchID, 
			COALESCE(COUNT(ScoreGamePieceEvent.gamePieceID = 'CN' OR NULL), 0) 
			AS totalCones,
			COALESCE(COUNT(ScoreGamePieceEvent.gamePieceID = 'CB' OR NULL), 0) 
			AS totalCubes,
			COALESCE(COUNT(ScoringLocation.level = 'High' OR NULL), 0) 
			AS totalHigh,
			COALESCE(COUNT(ScoringLocation.level = 'Middle' OR NULL), 0) 
			AS totalMiddle,
			COALESCE(COUNT(ScoringLocation.level = 'Low' OR NULL), 0) 
			AS totalLow
		FROM Scout
			LEFT JOIN ScoreGamePieceEvent ON 
				(Scout.id = ScoreGamePieceEvent.scoutid)
			JOIN ScoringLocation ON 
				(ScoreGamePieceEvent.scoringLocationID = ScoringLocation.ID)
		GROUP BY Scout.id
	      	     ) AS PiecesPerScout ON (RobotInMatch.ID = PiecesPerScout.robotInMatchID)

	GROUP BY RobotInMatch.id
	      ) AS PiecesPerMatch ON (Robot.TBAKey = PiecesPerMatch.robotTBAKey)

GROUP BY Robot.number
ORDER BY "AVG High" DESC, "AVG Middle" DESC, "AVG Low" DESC;







/*
 * 	Query for avg cubes, avg cones, avg high, avg medium, avg low 
 * 	avg ground pickup, avg station pickup, avg auto engage, avg tele engage 
 */ 







/*
 * 	Query for getting all of a team's events for 
 * 	the automonous period of each of their matches
 * 	at a given competition 
 * 	-- needs a robot numner and a competition TBA key
 */ 

PREPARE getAutoEventsRobotInCompetition (varchar(6), varchar(12)) AS
SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score Piece' AS "Event", 
	ScoreGamePieceEvent.scoringLocationID AS "Type",
	GamePiece.name AS "Piece",
	ScoreGamePieceEvent.matchPeriodID AS "Period",
	ScoreGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreGamePieceEvent ON (Scout.ID = ScoreGamePieceEvent.scoutID)
	JOIN GamePiece ON (ScoreGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2 AND ScoreGamePieceEvent.matchPeriodID = 'A'

UNION 

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Pickup' AS "Event", 
	PickupLocation.name AS "Type",
	GamePiece.name AS "Piece",
	PickUpGamePieceEvent.matchPeriodID AS "Period",
	PickUpGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN PickUpGamePieceEvent ON (Scout.ID = PickUpGamePieceEvent.scoutID)
	JOIN PickUpLocation ON 
		(PickUpGamePieceEvent.pickupLocationID = PickUpLocation.ID)
	JOIN GamePiece ON (PickUpGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2 AND PickUpGamePieceEvent.matchPeriodID = 'A'

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score' AS "Event", 
	NonGamePieceScoringType.name AS "Type",
	NULL AS "Piece",
	ScoreWithoutGamePieceEvent.matchPeriodID AS "Period",
	ScoreWithoutGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreWithoutGamePieceEvent ON (Scout.ID = ScoreWithoutGamePieceEvent.scoutID)
	JOIN NonGamePieceScoringType ON 
		(ScoreWithoutGamePieceEvent.nonGamePieceScoringTypeID = NonGamePieceScoringType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2 AND ScoreWithoutGamePieceEvent.matchPeriodID = 'A'

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Fault' AS "Event", 
	FaultType.name AS "Type",
	NULL AS "Piece",
	FaultEvent.matchPeriodID AS "Period",
	FaultEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN FaultEvent ON (Scout.ID = FaultEvent.scoutID)
	JOIN FaultType ON (FaultEvent.faultTypeID = FaultType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2 AND FaultEvent.matchPeriodID = 'A'

ORDER BY "Scout" ASC, timeOccurred ASC;

-- example execute:
-- EXECUTE getAutoEventsRobotInCompetition ('2930', '2023WATEST');






/*
 * 	Query for getting all of a team's events for 
 * 	of each of their matches
 * 	at a given competition 
 * 	-- needs a robot number and a competition key
 */ 

PREPARE getEventsRobotInCompetition (varchar(6), varchar(12)) AS
SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score Piece' AS "Event", 
	ScoreGamePieceEvent.scoringLocationID AS "Type",
	GamePiece.name AS "Piece",
	ScoreGamePieceEvent.matchPeriodID AS "Period",
	ScoreGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreGamePieceEvent ON (Scout.ID = ScoreGamePieceEvent.scoutID)
	JOIN GamePiece ON (ScoreGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2

UNION 

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Pickup' AS "Event", 
	PickupLocation.name AS "Type",
	GamePiece.name AS "Piece",
	PickUpGamePieceEvent.matchPeriodID AS "Period",
	PickUpGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN PickUpGamePieceEvent ON (Scout.ID = PickUpGamePieceEvent.scoutID)
	JOIN PickUpLocation ON 
		(PickUpGamePieceEvent.pickupLocationID = PickUpLocation.ID)
	JOIN GamePiece ON (PickUpGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score' AS "Event", 
	NonGamePieceScoringType.name AS "Type",
	NULL AS "Piece",
	ScoreWithoutGamePieceEvent.matchPeriodID AS "Period",
	ScoreWithoutGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreWithoutGamePieceEvent ON (Scout.ID = ScoreWithoutGamePieceEvent.scoutID)
	JOIN NonGamePieceScoringType ON 
		(ScoreWithoutGamePieceEvent.nonGamePieceScoringTypeID = NonGamePieceScoringType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Fault' AS "Event", 
	FaultType.name AS "Type",
	NULL AS "Piece",
	FaultEvent.matchPeriodID AS "Period",
	FaultEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN FaultEvent ON (Scout.ID = FaultEvent.scoutID)
	JOIN FaultType ON (FaultEvent.faultTypeID = FaultType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN Competition ON (Match.competitionTBAKey = Competition.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Competition.TBAKey = $2

ORDER BY "Scout" ASC, timeOccurred ASC;

-- example execute:
-- EXECUTE getEventsRobotInCompetition ('2930', '2023WATEST');






/*
 * 	Query for getting all of a team's events for 
 * 	the automonous period of a given match
 * 	-- needs a robot number and a matchTBAKey 
 */ 

PREPARE getAutoEventsRobotInMatch (varchar(6), varchar(20)) AS
SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score Piece' AS "Event", 
	ScoreGamePieceEvent.scoringLocationID AS "Type",
	GamePiece.name AS "Piece",
	ScoreGamePieceEvent.matchPeriodID AS "Period",
	ScoreGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreGamePieceEvent ON (Scout.ID = ScoreGamePieceEvent.scoutID)
	JOIN GamePiece ON (ScoreGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2 AND ScoreGamePieceEvent.matchPeriodID = 'A'

UNION 

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Pickup' AS "Event", 
	PickupLocation.name AS "Type",
	GamePiece.name AS "Piece",
	PickUpGamePieceEvent.matchPeriodID AS "Period",
	PickUpGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN PickUpGamePieceEvent ON (Scout.ID = PickUpGamePieceEvent.scoutID)
	JOIN PickUpLocation ON 
		(PickUpGamePieceEvent.pickupLocationID = PickUpLocation.ID)
	JOIN GamePiece ON (PickUpGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2 AND PickUpGamePieceEvent.matchPeriodID = 'A'

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score' AS "Event", 
	NonGamePieceScoringType.name AS "Type",
	NULL AS "Piece",
	ScoreWithoutGamePieceEvent.matchPeriodID AS "Period",
	ScoreWithoutGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreWithoutGamePieceEvent ON (Scout.ID = ScoreWithoutGamePieceEvent.scoutID)
	JOIN NonGamePieceScoringType ON 
		(ScoreWithoutGamePieceEvent.nonGamePieceScoringTypeID = NonGamePieceScoringType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2 AND ScoreWithoutGamePieceEvent.matchPeriodID = 'A'

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Fault' AS "Event", 
	FaultType.name AS "Type",
	NULL AS "Piece",
	FaultEvent.matchPeriodID AS "Period",
	FaultEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN FaultEvent ON (Scout.ID = FaultEvent.scoutID)
	JOIN FaultType ON (FaultEvent.faultTypeID = FaultType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2 AND FaultEvent.matchPeriodID = 'A'

ORDER BY "Scout" ASC, timeOccurred ASC;

-- example execute:
-- EXECUTE getAutoEventsRobotInMatch ('2930', '2023WATEST_qm1');





/*
 * 	Query for getting all of a team's events for 
 * 	a given match 
 * 	-- needs a robot number and a matchTBAkey
 */ 

PREPARE getEventsRobotInMatch (varchar(6), varchar(20)) AS
SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score Piece' AS "Event", 
	ScoreGamePieceEvent.scoringLocationID AS "Type",
	GamePiece.name AS "Piece",
	ScoreGamePieceEvent.matchPeriodID AS "Period",
	ScoreGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreGamePieceEvent ON (Scout.ID = ScoreGamePieceEvent.scoutID)
	JOIN GamePiece ON (ScoreGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2

UNION 

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Pickup' AS "Event", 
	PickupLocation.name AS "Type",
	GamePiece.name AS "Piece",
	PickUpGamePieceEvent.matchPeriodID AS "Period",
	PickUpGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN PickUpGamePieceEvent ON (Scout.ID = PickUpGamePieceEvent.scoutID)
	JOIN PickUpLocation ON 
		(PickUpGamePieceEvent.pickupLocationID = PickUpLocation.ID)
	JOIN GamePiece ON (PickUpGamePieceEvent.gamePieceID = GamePiece.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Score' AS "Event", 
	NonGamePieceScoringType.name AS "Type",
	NULL AS "Piece",
	ScoreWithoutGamePieceEvent.matchPeriodID AS "Period",
	ScoreWithoutGamePieceEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN ScoreWithoutGamePieceEvent ON (Scout.ID = ScoreWithoutGamePieceEvent.scoutID)
	JOIN NonGamePieceScoringType ON 
		(ScoreWithoutGamePieceEvent.nonGamePieceScoringTypeID = NonGamePieceScoringType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2

UNION

SELECT 	Robot.number AS "Team Number",
	MatchType.name || ' ' || Match.number AS "Match Number",
	Scout.ID AS "Scout",
	'Fault' AS "Event", 
	FaultType.name AS "Type",
	NULL AS "Piece",
	FaultEvent.matchPeriodID AS "Period",
	FaultEvent.timeOccurred::time
FROM RobotInMatch 
	LEFT JOIN Scout ON (RobotInMatch.ID = Scout.robotInMatchID)
	JOIN FaultEvent ON (Scout.ID = FaultEvent.scoutID)
	JOIN FaultType ON (FaultEvent.faultTypeID = FaultType.ID)
	JOIN Robot ON (RobotInMatch.robotTBAKey = Robot.TBAKey)
	JOIN Match ON (RobotInMatch.matchTBAKey = Match.TBAKey)
	JOIN MatchType ON (Match.matchTypeID = MatchType.ID)
WHERE Robot.number = $1 AND Match.TBAKey = $2

ORDER BY "Scout" ASC, timeOccurred ASC;

-- example execute:
-- EXECUTE getEventsRobotInMatch ('2930', '2023WATEST_qm1');